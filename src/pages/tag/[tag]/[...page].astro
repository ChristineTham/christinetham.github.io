---
import type { PaginateFunction, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { PAGE_SIZE, getPosts } from '../../../common/config'
import Base from '../../../common/base.astro'
import PageHero from '../../../common/pagehero.astro'
import BlogRoll from '../../../common/blogroll.astro'
import PaginateControl from '../../../common/paginatecontrol.astro'
import coverImage from '../../../images/svg/undraw/add_notes.svg'
import socialImage from '../../../images/undraw/add_notes.png'

export interface Props {
  page: Page<CollectionEntry<'blog'>>
}

const { tag } = Astro.params
const { page } = Astro.props

const frontmatter: CollectionEntry<'page'>['data'] = {
  title:
    'Tag: ' +
    tag +
    (page.size < page.total ? ' (page ' + page.currentPage + ' of ' + page.lastPage + ')' : ''),
  description:
    'Showing articles ' + (page.start + 1) + '-' + (page.end + 1) + ' (total ' + page.total + ')',
  coverImage: coverImage,
  socialImage: socialImage
}

const currentPage = Astro.url.pathname.replace(/(\/\d*)?\/?$/, '')

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const posts = await getPosts()

  const tags = Array.from(new Set(posts.flatMap((post) => post.data.tags)))

  return tags.flatMap((tag) => {
    return paginate(
      posts.filter((post) => tag && post.data.tags?.includes(tag)),
      {
        params: { tag },
        pageSize: PAGE_SIZE
      }
    )
  })
}
---

<Base frontmatter={frontmatter} schema='CollectionPage'>
  <header>
    <PageHero
      title={frontmatter.title!}
      description={frontmatter.description}
      coverImage={frontmatter.coverImage}
      socialImage={frontmatter.socialImage}
    >
      <PaginateControl base={currentPage} page={page} />
    </PageHero>
  </header>
  <main itemprop='mainContentOfPage' class='bg-rosely7 dark:bg-rosely1'>
    <BlogRoll posts={page.data} />
  </main>
</Base>
