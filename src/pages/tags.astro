---
import { getPosts, type TagType } from '../common/config'
import type { CollectionEntry } from 'astro:content'
import Base from '../common/base.astro'
import PageHero from '../common/pagehero.astro'
import {
  jupiter,
  cutout,
  pianoMan,
  pieFactory,
  graphPaper,
  charlieBrown,
  autumn,
  temple,
  deathStar,
  churchOnSunday,
  overlappingHexagons,
  bamboo,
  bathroomFloor,
  corkScrew,
  happyIntersection,
  kiwi,
  lips,
  lisbon,
  steelBeams,
  tinyCheckers,
  fancyRectangles,
  heavyRain,
  cage,
  connections,
  flippedDiamonds,
  houndstooth,
  morphingDiamonds,
  zigZag,
  aztec,
  bankNote,
  boxes,
  diagonalLines,
  endlessClouds,
  eyes,
  groovy,
  melt,
  parkayFloor,
  pixelDots,
  signal,
  wallpaper
} from 'hero-patterns'

const patterns = [
  steelBeams('#d2386c', 0.5),
  jupiter('#d2386c', 0.5),
  cutout('#d2386c', 0.5),
  pianoMan('#d2386c', 0.5),
  pieFactory('#d2386c', 0.5),
  graphPaper('#d2386c', 0.5),
  charlieBrown('#d2386c', 0.5),
  autumn('#d2386c', 0.5),
  temple('#d2386c', 0.5),
  deathStar('#d2386c', 0.5),
  churchOnSunday('#d2386c', 0.5),
  overlappingHexagons('#d2386c', 0.5),
  bamboo('#d2386c', 0.5),
  bathroomFloor('#d2386c', 0.5),
  corkScrew('#d2386c', 0.5),
  happyIntersection('#d2386c', 0.5),
  kiwi('#d2386c', 0.5),
  lips('#d2386c', 0.5),
  lisbon('#d2386c', 0.5),
  tinyCheckers('#d2386c', 0.5),
  fancyRectangles('#d2386c', 0.5),
  heavyRain('#d2386c', 0.5),
  cage('#d2386c', 0.5),
  connections('#d2386c', 0.5),
  flippedDiamonds('#d2386c', 0.5),
  houndstooth('#d2386c', 0.5),
  morphingDiamonds('#d2386c', 0.5),
  zigZag('#d2386c', 0.5),
  aztec('#d2386c', 0.5),
  bankNote('#d2386c', 0.5),
  boxes('#d2386c', 0.5),
  diagonalLines('#d2386c', 0.5),
  endlessClouds('#d2386c', 0.5),
  eyes('#d2386c', 0.5),
  groovy('#d2386c', 0.5),
  melt('#d2386c', 0.5),
  parkayFloor('#d2386c', 0.5),
  pixelDots('#d2386c', 0.5),
  signal('#d2386c', 0.5),
  wallpaper('#d2386c', 0.5)
]

import coverImage from '../images/svg/undraw/add_notes.svg'
import socialImage from '../images/undraw/add_notes.png'
const frontmatter: CollectionEntry<'page'>['data'] = {
  title: 'Tags',
  description: 'Articles by tags',
  coverImage: coverImage,
  socialImage: socialImage
}

const posts = await getPosts()

const tagmap: Map<string, TagType> = new Map()

posts.forEach((post) => {
  post.data.tags?.forEach((tag) => {
    let utag = tagmap.get(tag)
    if (utag) {
      utag.count += 1
      // utag.pages.push(post)
    } else {
      // utag = { tag: tag, count: 1, pages: [post] }
      utag = { tag: tag, count: 1 }
    }
    tagmap.set(tag, utag)
  })
})

const tags = Array.from(tagmap.values()).sort((a, b) => b.count - a.count)
---

<Base frontmatter={frontmatter} schema='CollectionPage'>
  <header>
    <PageHero
      title={frontmatter.title!}
      description={frontmatter.description}
      coverImage={frontmatter.coverImage}
      socialImage={frontmatter.socialImage}
    />
  </header>
  <main itemprop='mainContentOfPage' class='bg-rosely7 dark:bg-rosely0'>
    <div
      itemprop='mainEntity'
      itemscope
      itemtype='https://schema.org/CollectionPage'
      class='mx-4 grid grid-cols-2 gap-x-4 gap-y-4 py-4 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 xl:gap-x-6 xl:gap-y-6'
    >
      {
        tags.map((tag, i) => (
          <a href={`${import.meta.env.BASE_URL}tag/${tag.tag}/`} class='group'>
            <section
              class='group relative h-24 w-full overflow-hidden rounded-lg bg-cover bg-center shadow-lg transition duration-300 ease-in-out hover:shadow-2xl'
              style={{
                backgroundColor: '#dfdbe5',
                // backgroundImage: `url(${OGImage})`,
                backgroundImage: patterns[i % patterns.length]
              }}
            >
              <div class='bg-rosely9 bg-opacity-75 absolute inset-0 transition duration-300 ease-in-out group-hover:opacity-75' />
              <div class='relative flex h-full w-full items-center justify-center px-4 sm:px-6 lg:px-4'>
                <h3 class='text-center text-2xl font-bold text-white'>
                  <span class='absolute inset-0' />
                  {tag.tag}
                </h3>
                <p class='text-center text-sm font-medium text-gray-200'>&nbsp;({tag.count})</p>
              </div>
            </section>
          </a>
        ))
      }
    </div>
  </main>
</Base>
